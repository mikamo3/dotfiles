#!/usr/bin/env bash
set -e
MEMO_DIR=${MEMO_DIR:-~/.memo}
CACHE_FILE=${MEMO_DIR}/.cache
if [[ $# == 0 ]]; then
  cat <<EOF
private memo.
Usage: memo COMMAND

Commands:
  show filename                                       Show memo
  add [--category categoryname]
      [--tag tagname...]
      [--title title]                                 Add memo (open editor)
  edit filename                                       Edit memo (open editor)
  del filename                                        Delete memo
  list --category | --tag | --title                   List categories
  search --category | --tag | --title searchword      Search memo
  genindex                                            Regenerate search index
EOF
  exit 1
fi
function _regenerate_index() {
  : >"$CACHE_FILE"
  while read -r f; do
    _add_index "$f"
  done < <(find "$MEMO_DIR" -type f -not -name "${CACHE_FILE##*/}")

}
function _add_index() {
  local content
  local title
  local category
  local tags
  local filename
  local index
  content=$(sed -n 1,3p "$1")
  filename=${1##*/}
  title=$(echo "$content" | sed -n 1p | sed -e 's/^.*: *\(.*\) *$/\1/')
  category=$(echo "$content" | sed -n 2p | sed -e 's/^.*: *\(.*\) *$/\1/')
  tags=$(echo "$content" | sed -n 3p | sed -e 's/^.*: *\(.*\) *$/\1/')
  index="${filename}\t${title}\t${category}\t${tags}"
  sed -i -e "/^$filename/d" "${CACHE_FILE}"
  echo -e "$index" >>"${CACHE_FILE}"
}
function _del_index() {
  local filename
  filename=${1##*/}
  sed -i -e "/^$filename/d" "${CACHE_FILE}"
}

function _detect_editor() {
  for editor in "$EDITOR" nvim vim nano vi; do
    if command -v "$editor" >/dev/null 2>&1; then
      break
    fi
  done
  echo "$editor"
}

function _add() {
  local title
  local category
  local tags
  while [[ "$1" != "" ]]; do
    case "$1" in
    "--title")
      shift
      if [[ "$1" == "" ]]; then
        echo "need title" 1>&2
        exit 1
      fi
      title="$1"
      ;;
    "--category")
      shift
      if [[ "$1" == "" ]]; then
        echo "need categoryname" 1>&2
        exit 1
      fi
      category="$1"
      ;;
    "--tag")
      if [[ "$2" == "" || "$2" =~ ^--(title|category)$ ]]; then
        echo "need tagname" 1>&2
        exit 1
      fi
      while [[ "$2" != "" ]]; do
        if [[ "$2" == "" || "$2" =~ ^--(title|category)$ ]]; then
          break
        fi
        tags="$tags $2"
        shift
      done
      ;;
    *)
      echo "invalid option" 1>&2
      exit 1
      ;;
    esac
    shift
  done
  TEMPLATE="Title: $title
Category: $category
Tag:$tags
================================================================================
"

  if [[ ! -e "$MEMO_DIR" ]]; then
    mkdir -p "$MEMO_DIR"
  fi
  editor=$(_detect_editor)
  memofilepath="$MEMO_DIR/$(date +%s%3N | md5sum | cut -c 1-16)"
  echo "$TEMPLATE" >"$memofilepath"
  $editor "$memofilepath"
  if diff "$memofilepath" <(
    echo "$TEMPLATE"
  ) &>/dev/null; then
    rm "$memofilepath"
  else
    _add_index "$memofilepath"
    echo "add memo: $memofilepath"
  fi
}

_show() {
  if [[ "$1" == "" ]]; then
    echo "need filename" 1>&2
    exit 1
  fi
  if [[ ! -f "${MEMO_DIR}/$1" ]]; then
    echo "$1 does not exist" 1>&2
    exit 1
  fi
  cat "${MEMO_DIR}/$1"
}

_edit() {
  if [[ ! -f "${MEMO_DIR}/$1" ]]; then
    echo "$1 does not exist" 1>&2
    exit 1
  fi
  editor=$(_detect_editor)
  $editor "${MEMO_DIR}/$1"
  _add_index "${MEMO_DIR}/$1"
}

_del() {
  if [[ "$1" == "" ]]; then
    echo "need filename" 1>&2
    exit 1
  fi
  if [[ ! -f "${MEMO_DIR}/$1" ]]; then
    echo "$1 does not exist" 1>&2
    exit 1
  fi
  _del_index "${MEMO_DIR}/$1"
  rm "${MEMO_DIR}/$1" && echo "delete memo: $1"
}

_list() {
  local POS_TITLE
  local POS_CATEGORY
  local POS_TAGS
  POS_TITLE=2
  POS_CATEGORY=3
  POS_TAGS=4

  case "$1" in
  "--title")
    cut -f $POS_TITLE "${CACHE_FILE}" | sort | uniq
    ;;
  "--category")
    cut -f $POS_CATEGORY "${CACHE_FILE}" | sort | uniq
    ;;
  "--tag")
    cut -f $POS_TAGS "${CACHE_FILE}" | awk '{for(i=1;i<=NF;i++) print $i}' | sort | uniq
    ;;
  *)
    echo "need --title | --category | --tag" 1>&2
    ;;
  esac

}
_search() {
  local POS_TITLE
  local POS_CATEGORY
  local POS_TAGS
  local awk_program
  POS_TITLE=2
  POS_CATEGORY=3
  POS_TAGS=4
  AWK_PROGRAM_TEMPLATE='
  BEGIN{FS="\t"}
  { if (match($%POS%, "%WORD%")) {
      printf ("\033[32m["$3"]\033[m \033[33m["$4"]\033[m "$2" \033[36m"$1"\033[m\n")
    }
  }'
  if [[ $# == 0 ]]; then
    awk_program="$(sed -e "s/%POS%/${POS_TITLE}/g" -e "s/%WORD%//g" <<<"${AWK_PROGRAM_TEMPLATE}")"
  else
    case "$1" in
    "--title")
      awk_program="$(sed -e "s/%POS%/${POS_TITLE}/g" -e "s/%WORD%/$2/g" <<<"${AWK_PROGRAM_TEMPLATE}")"
      ;;
    "--category")
      awk_program="$(sed -e "s/%POS%/${POS_CATEGORY}/g" -e "s/%WORD%/$2/g" <<<"${AWK_PROGRAM_TEMPLATE}")"
      ;;
    "--tag")
      awk_program="$(sed -e "s/%POS%/${POS_TAGS}/g" -e "s/%WORD%/$2/g" <<<"${AWK_PROGRAM_TEMPLATE}")"
      ;;
    *)
      echo "invalid option" 1>&2
      exit 1
      ;;
    esac
  fi
  awk "${awk_program}" "${CACHE_FILE}" | sort
}

case "$1" in
"add")
  shift
  _add "$@"
  ;;
"show")
  _show "$2"
  ;;
"edit")
  _edit "$2"
  ;;
"del")
  _del "$2"
  ;;
"list")
  _list "$2"
  ;;
"search")
  shift
  _search "$@"
  ;;
"genindex")
  _regenerate_index
  ;;
*)
  echo "unknown command" 1>&2
  exit 1
  ;;
esac
